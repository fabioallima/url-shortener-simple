name: Initialize Terraform Infrastructure

on:
  workflow_dispatch:  # Permite execução manual

jobs:
  init-infra:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Check if resources exist
      id: check_resources
      run: |
        cd infra
        # Backup do arquivo main.tf original
        cp main.tf main.tf.bak
        sed -i '/backend "s3"/,/}/d' main.tf
        cat >> main.tf <<EOF

        terraform {
          backend "local" {}
        }
        EOF
        
        # Inicializa o Terraform
        terraform init
        
        # Verifica se os recursos já existem
        if terraform state list | grep -q "aws_s3_bucket.terraform_state" && \
           terraform state list | grep -q "aws_dynamodb_table.terraform_state_lock"; then
          echo "resources_exist=true" >> $GITHUB_OUTPUT
        else
          echo "resources_exist=false" >> $GITHUB_OUTPUT
        fi

    - name: Create S3 and DynamoDB resources
      if: steps.check_resources.outputs.resources_exist == 'false'
      run: |
        cd infra
        terraform apply -auto-approve -target=aws_s3_bucket.terraform_state -target=aws_s3_bucket_versioning.terraform_state -target=aws_s3_bucket_server_side_encryption_configuration.terraform_state -target=aws_s3_bucket_public_access_block.terraform_state -target=aws_dynamodb_table.terraform_state_lock

    - name: Restore original configuration
      run: |
        cd infra
        mv main.tf.bak main.tf

    - name: Initialize Terraform with S3 backend
      run: |
        cd infra
        echo "yes" | terraform init -migrate-state 