name: Deploy Lambda with Terraform

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/lambdas/create_url/requirements.txt

    - name: Build Lambda package
      run: bash build.sh

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      working-directory: infra
      continue-on-error: true

    - name: Initialize Terraform
      id: init
      run: terraform init
      working-directory: infra

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: infra

    - name: Force Unlock State
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd infra
        # Verifica se existe um lock e tenta remov√™-lo
        if terraform force-unlock -force 2>&1 | grep -q "Error acquiring the state lock"; then
          echo "State is locked, attempting to force unlock..."
          LOCK_ID=$(terraform force-unlock -force 2>&1 | grep -o 'ID: [a-f0-9-]*' | cut -d' ' -f2)
          if [ ! -z "$LOCK_ID" ]; then
            echo "Found lock ID: $LOCK_ID"
            terraform force-unlock -force "$LOCK_ID"
          else
            echo "No lock ID found"
          fi
        else
          echo "No state lock found"
        fi

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -lock=false
      working-directory: infra
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: output
          })

    - name: Apply Terraform
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: infra
